
R version 3.5.0 (2018-04-23) -- "Joy in Playing"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "LAMatrix"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('LAMatrix')
Loading required package: MatrixEQTL
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("LAMatrix_main")
> ### * LAMatrix_main
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LAMatrix_main
> ### Title: Efficient eQTL Mapping with Local Ancestry
> ### Aliases: LAMatrix_main
> 
> ### ** Examples
> 
> library("LAMatrix")
> 
> n = 200;# Number of columns (samples)
> nc = 10;# Number ofs covariates
> 
> cvrt.mat = 2 + matrix(rnorm(n*nc), ncol = nc);# Generate the covariates
> snps.mat = floor(runif(n, min = 0, max = 3)); # Generate the genotype
> local.mat = floor(runif(n, min = 0, max = 3)); # Generate the local ancestry
> 
> # Generate the expression vector
> gene.mat = cvrt.mat %*% rnorm(nc) + rnorm(n) + 0.5 * snps.mat + 1 + 0.3 *local.mat;
> 
> 
> #Create SlicedData objects
> snps = SlicedData$new( matrix( snps.mat, nrow = 1 ) );
> genes = SlicedData$new( matrix( gene.mat, nrow = 1 ) );
> cvrts = SlicedData$new( t(cvrt.mat) );
> locals = SlicedData$new( matrix(local.mat,nrow=1))
> 
> # Produce no output files
> filename = NULL; # tempfile()
> 
> modelLOCAL = 930507L;
> me = LAMatrix_main(
+  snps = snps,
+  gene = genes,
+  cvrt = cvrts,
+  local = locals,
+  output_file_name = filename,
+  pvOutputThreshold = 1,
+  useModel = modelLOCAL,
+  verbose = TRUE,
+  pvalue.hist = FALSE);
Processing covariates 
Task finished in  0.001  seconds
Processing gene expression data (imputation, residualization, etc.) 
Task finished in  0.001  seconds
Creating output file(s) 
Task finished in  0.004  seconds
Performing eQTL analysis 
100.00% done, 1 eQTLs
Task finished in  0.004  seconds
 
> 
> 
> # Pull results - t-statistic and p-value
> beta = me$all$eqtls$beta;
> tstat = me$all$eqtls$statistic;
> pvalue = me$all$eqtls$pvalue;
> rez = c(beta = beta, tstat = tstat, pvalue = pvalue);
> print(rez)
        beta        tstat       pvalue 
6.476127e-01 7.573593e+00 1.619735e-12 
> 
> # Results from linear
> lmdl = lm( gene.mat ~ snps.mat + cvrt.mat + local.mat);
> lmout = summary(lmdl)$coefficients[2,c("Estimate","t value","Pr(>|t|)")];
> print( lmout );
    Estimate      t value     Pr(>|t|) 
6.476127e-01 7.573593e+00 1.619735e-12 
> 
> 
> 
> cleanEx()
> nameEx("modelLOCAL")
> ### * modelLOCAL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: modelLOCAL
> ### Title: Constant for 'LAMatrix_main'
> ### Aliases: modelLOCAL
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library("LAMatrix")
> 
> n = 200;# Number of columns (samples)
> nc = 10;# Number ofs covariates
> 
> cvrt.mat = 2 + matrix(rnorm(n*nc), ncol = nc);# Generate the covariates
> snps.mat = floor(runif(n, min = 0, max = 3)); # Generate the genotype
> local.mat = floor(runif(n, min = 0, max = 3)); # Generate the local ancestry
> 
> # Generate the expression vector
> gene.mat = cvrt.mat %*% rnorm(nc) + rnorm(n) + 0.5 * snps.mat + 1 + 0.3 *local.mat;
> 
> 
> #Create SlicedData objects
> snps = SlicedData$new( matrix( snps.mat, nrow = 1 ) );
> genes = SlicedData$new( matrix( gene.mat, nrow = 1 ) );
> cvrts = SlicedData$new( t(cvrt.mat) );
> locals = SlicedData$new( matrix(local.mat,nrow=1))
> 
> # Produce no output files
> filename = NULL; # tempfile()
> 
> modelLOCAL = 930507L;
> me = LAMatrix_main(
+  snps = snps,
+  gene = genes,
+  cvrt = cvrts,
+  local = locals,
+  output_file_name = filename,
+  pvOutputThreshold = 1,
+  useModel = modelLOCAL,
+  verbose = TRUE,
+  pvalue.hist = FALSE);
Processing covariates 
Task finished in  0.001  seconds
Processing gene expression data (imputation, residualization, etc.) 
Task finished in  0  seconds
Creating output file(s) 
Task finished in  0.003  seconds
Performing eQTL analysis 
100.00% done, 1 eQTLs
Task finished in  0.003  seconds
 
> 
> 
> # Pull results - t-statistic and p-value
> beta = me$all$eqtls$beta;
> tstat = me$all$eqtls$statistic;
> pvalue = me$all$eqtls$pvalue;
> rez = c(beta = beta, tstat = tstat, pvalue = pvalue);
> print(rez)
        beta        tstat       pvalue 
6.476127e-01 7.573593e+00 1.619735e-12 
> 
> # Results from linear
> lmdl = lm( gene.mat ~ snps.mat + cvrt.mat + local.mat);
> lmout = summary(lmdl)$coefficients[2,c("Estimate","t value","Pr(>|t|)")];
> print( lmout );
    Estimate      t value     Pr(>|t|) 
6.476127e-01 7.573593e+00 1.619735e-12 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.153 0.006 0.16 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
